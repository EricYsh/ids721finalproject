name: CICD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ECR_REPOSITORY: test-ecr
  EKS_CLUSTER_NAME: test-cluster
  AWS_REGION: us-east-2

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the Docker image
        run: docker build -t idsfinal .
      - name: Push the Docker image
        run: docker tag idsfinal ${{ secrets.DOCKER_USERNAME }}/idsfinal:latest

  # test:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   container:
  #     image: rust:latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Setup Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - name: Setup Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.9'

  #     - name: Install Python dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install transformers torch
  #     - uses: actions/checkout@v3
  #     - name: Run tests
  #       run: RUST_BACKTRACE=full cargo test --bin ids721-final

#  deploy:
#    runs-on: ubuntu-latest
#    needs: [build]
#    steps:
#        - uses: actions/checkout@v3
#        - name: Setup Python
#          uses: actions/setup-python@v2
#          with:
#            python-version: '3.9'
#        - name: Install Python dependencies
#          run: |
#            python -m pip install --upgrade pip
#            pip install transformers torch
#        - name: Install Minikube dependencies
#          run: |
#            sudo apt-get update
#            sudo apt-get install -y conntrack
#        - name: Install Minikube
#          run: |
#            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#            sudo install minikube-linux-amd64 /usr/local/bin/minikube
#        - name: Install kubectl
#          run: |
#            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
#            chmod +x ./kubectl
#            sudo mv ./kubectl /usr/local/bin/kubectl
#        - name: Start Minikube
#          run: |
#            minikube start --driver=none
#        - name: Set KUBECONFIG
#          run: |
#            echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
#        - name: Check Minikube status
#          run: |
#            minikube status
#        - name: Deploy to Kubernetes
#          run: |
#            kubectl apply -f k8s/deployment.yaml
#        - name: Deploy service
#          run: |
#            kubectl apply -f k8s/service.yaml

deploy:
  runs-on: ubuntu-latest

  steps:
    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2

    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/a9f6i1z5
        docker build -t test-ecr .
        docker tag test-ecr:latest public.ecr.aws/a9f6i1z5/test-ecr:latest
        docker push public.ecr.aws/a9f6i1z5/test-ecr:latest

    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        kubectl create namespace eks-app
        kubectl apply -f eks-deployment.yaml
        kubectl apply -f eks-service.yaml
